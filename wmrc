#! /usr/bin/env dash

export WMRC_DIR
export WMRC
export MODULES

WMRC_USR="$(dirname "$(readlink -f "$0")")"
WMRC="$(readlink -f "$0")"
WMRC_DIR="$(readlink -f "$HOME/.config/wmrc")"
MODULES="$WMRC_DIR/modules"
RC="$WMRC_DIR/rc.conf"
HOST="$(hostname)"

DRY_RUN="false"
DEBUG="false"

error() {

  >&2 echo "$1"

  [ -z "$3" ] && EXIT_CODE=1 || EXIT_CODE=2
  [ "$2" = "fatal" ] && exit "$EXIT_CODE"

}

section() {

  [ -f "$RC" ] || error "Configuration file not found!" fatal 3

  local L
  local N
  local S
  local W
  local Q
  local D
  local F
  local P
  local M
  local A
  local S
  local E

  L="a-zA-Z" # Letters
  N="0-9" # Numbers
  S="_-" # Special characters
  W="\*" # Wildcard
  Q="\&nbsp" # Quote word separator
  D="([$L$N$S]+\/)" # Module directory
  F="([$L$N][$L$N$S]*)(\.[$L$N$S]+)*" # Module file
  P="(\(([$Q$L$N$S]+(,[$Q$L$N$S]+)*)*\))?" # Module parameters
  M="($F$P)" # Module file with parameters
  A="(before|after|replace)" # Section header arguments
  S="(\[$1(@$HOST)?(:$A)?\])" # Section header
  E="$D($M(,($M|$W))*|$W)" # Section entry
  
  local RG
  local MATCH
  local MOD
  local MODR
  local ARG
  local M

  RG="(($S)(\n$E)+\n?)"
  MATCH="$(awk '!(NR%2){gsub(FS,"\\&nbsp")}1' ORS="" RS="'" "$RC" | \
         sed "s/ //g; s/#.*//g; /^$/d;" | grep -Pzo "$RG")"

  MOD=""
  MODR=""
  ARG=""
  for M in $MATCH; do

    echo "$M" | grep -Pzq "$S" && \
      ARG="$(echo "$M" | grep -Po "$A")" \
      && continue
    [ -z "$ARG" ] && ARG="after" && continue

    case "$ARG" in
      before)
        MOD="$M\n$MOD";;
      after)
        MOD="$MOD\n$M";;
      replace)
        MODR="$MODR\n$M";;
    esac

  done

  [ -z "$MODR" ] || MOD="$MODR"
  SECTION="$(echo "$MOD" | sed "/^$/d")"

  [ -z "$SECTION" ] && return 1 || return 0

}

variables() {

  local L
  local N
  local S
  local V
  local C

  L="a-zA-Z" # Letters
  N="0-9" # Numbers
  S="_" # Special characters
  V="(\%[$L][$L$N$S]+)" # Variable name
  C="([$L$N$S]+)" # variable value

  local VARS
  local VN
  local VV

  VARS="$(sed "s/ //g; s/#.*//g; /^$/d" "$RC" | grep -Po "$V\=$C")"

  ENVVARS=""
  for V in $VARS; do
    
    VN="$(echo "$V" | sed "s/\%//; s/=.*$//")"
    VV="$(echo "$V" | sed "s/.*=//;")"

    [ "$DRY_RUN" = "true" ] && echo " - $VN: $VV"

    ENVVARS="$ENVVARS$VN=$VV "

  done

} 

modules() {

  local L
  local N
  local S
  local W
  local Q
  local D
  local F
  local P
  local M
  local E

  L="a-zA-Z" # Letters
  N="0-9" # Numbers
  S="_-" # Special characters
  W="\*" # Wildcard
  Q="\&nbsp" # Quote word separator
  D="([$L$N$S]+)\/" # Module directory
  F="([$L$N][$L$N$S]*)(\.[$L$N$S]+)*" # Module file
  P="(\(([$Q$L$N$S]+(,[$Q$L$N$S]+)*)*\))?" # Module parameters
  M="($F$P)" # Module file with parameters
  E="($M(,$M)*(,$W)?|$W)" # Section entry

  local EXECUTE
  local ME
  local MDIR
  local ALL
  local MODS
  local M
  local EXE
  local PRM
  local RUN

  EXECUTE=""
  for ME in $1; do

    MDIR="$(echo "$ME" | sed "s/\/.*//g")"
    [ -d "$MODULES/$MDIR" ] || \
      error "Module directory '$MDIR' doesn't exist!" || \
      continue

    ALL="$(find "$MODULES/$MDIR" -maxdepth 1 -type f -executable -printf "%P,")"
    MODS="$(echo "$ME" | sed "s/.*\///g; s/\*/$ALL/; s/\*//g" | grep -Po "($F$P)|$W")"

    for M in $MODS; do
      EXE="$(echo "$M" | sed "s/(.*//g")"
      PRM="$(echo "$M" | sed "s/^$EXE//g; s/(//g; s/)//g; s/,/ /g")"
      [ -f "$MODULES/$MDIR/$EXE" ] || \
        error "Module '$MDIR/$EXE' doesn't exist!" || \
        continue
      RUN="$MDIR/$EXE $PRM"
      echo "$EXECUTE" | grep -q "$RUN;" ||
        EXECUTE="$EXECUTE $RUN;" &&
        execute "$MDIR" "$EXE" "$PRM"
    done

  done

}

execute() {

  [ -x "$MODULES/$1/$2" ] || \
    error "Module '$1/$2' is not executable by this user!" || \
    return

  local DEPS
  local FLAGS
  local FLAG_ASYNC_LOCK
  local F
  local PRM
  local CMD

  DEPS="$(grep "\#[ ]*WMRC_DEPS" "$MODULES/$1/$2" | sed "s/\# *WMRC_DEPS\: *//; s/,/ /g")"
  for D in $DEPS; do
    [ -n "$(command -v "$D")" ] || \
      error "Module '$1/$2' has a missing dependency: '$D'!"
  done

  FLAG_ASYNC_LOCK=""

  FLAGS="$(grep "\#[ ]*WMRC_FLAGS" "$MODULES/$1/$2" | sed "s/\# *WMRC_FLAGS\: *//; s/,/ /g")"
  for F in $FLAGS; do
    case "$F" in
      async_lock)
        FLAG_ASYNC_LOCK="true";;
    esac
  done

  PRM="\"$(echo "$3" | sed "s/ /\" \"/g; s/\&nbsp/ /g")\""
  CMD="env $ENVVARS $MODULES/$1/$2 $PRM >/dev/null"

  if [ "$DRY_RUN" = "true" ]; then
    [ -z "$3" ] && PRM="" || PRM="($PRM)"
    echo " - $1/$2 $PRM"
  elif [ -z "$FLAG_ASYNC_LOCK" ] && [ "$DEBUG" = "false" ]; then
    eval "$CMD" 2>&1 &
  else
    eval "$CMD" || \
      error "Error occurred while running module '$1/$2 ($PRM)'!"
  fi

}

dependencies() {

  local MODS
  local DEPS
  local M
  local D

  MODS="$(find "$MODULES/" -mindepth 2 -maxdepth 2 -type f -printf "%P ")"
  DEPS=""
  
  for M in $MODS; do
    D="$(grep "\#[ ]*WMRC_DEPS" "$MODULES/$M" | sed "s/\# *WMRC_DEPS\: *//; s/,/\n/g; s/ //g")"
    DEPS="$DEPS\n$D"
  done

  DEPS="$(echo "$DEPS" | awk 'NF && !seen[$0]++')"

  for D in $DEPS; do
    [ "$1" = "missing" ] && [ -n "$(command -v "$D")" ] || \
      echo "$D"
  done

}

dry_run() {

  DRY_RUN="true"

  section "$1" || \
    error "Section '$1' not found or empty" fatal 2
  echo "Section '$1':"

  echo "Variables:"
  variables

  echo "Modules:"
  modules "$SECTION"

}

run() {

  section "$1" || \
    error "Section '$1' not found or empty" fatal 2

  variables
  modules "$SECTION"

}

init() {

  mkdir -p "$WMRC_DIR"

  if ! [ -f "$RC" ]; then
    cp "$WMRC_USR/$(basename "$RC")" "$WMRC_DIR"
  else
    error "Configuration file exists, skipping!"
  fi
  
  if ! [ -d "$MODULES" ]; then
    cp "$WMRC_USR/$(basename "$MODULES")" "$WMRC_DIR"
  else
    error "Modules directory exists, skipping!"
  fi
  
}

vars() {

  variables
  echo "$ENVVARS" | tr ' ' '\n' | sed '/^$/d'

}

help() {

  less "$WMRC_USR/readme.txt"

}

check() {

  [ "$1" = "display" ] && [ -z "$DISPLAY" ] && \
    error "Environment variable 'DISPLAY' is not set!" fatal 1

  [ -d "$WMRC_DIR" ] || \
    error "Configuration directory '$WMRC_DIR' does not exist!\nRun 'wmrc --init' to set defaults." fatal 1

  [ -d "$MODULES" ] || \
    error "Modules directory '$MODULES' does not exist!\nRun 'wmrc --init' to set defaults." fatal 1

  [ -f "$RC" ] || \
    error "Configuration file '$RC' does not exist!\nRun 'wmrc --init' to set defaults." fatal 1

}

main() {
  
  local ARG1
  local ARG2
  
  ARG1="$1"
  [ -z "$1" ] && ARG1="init"

  ARG2="$2"
  [ -n "$1" ] && [ -z "$2" ] && ARG2="init"

  case "$ARG1" in
    "-d"|"--deps")
      check;
      dependencies;;
    "-m"|"--missing-deps")
      check;
      dependencies missing;;
    "-l"|"--dry-run")
      check;
      dry_run "$ARG2";;
    "-g"|"--debug")
      DEBUG="true";
      check display;
      run "$ARG2";;
    "-v"|"--vars")
      check;
      vars;;
    "-i"|"--init")
      init;;
    "-h"|"--help")
      help;;
    *)
      check display;
      run "$ARG1";;
  esac

}

main "$@"